#pragma warning(disable : 4996);
#include <iostream>
using namespace std;



struct stDate {
	short Year = 0;
	short Month = 0;
	short Day = 0;

};


bool IsLeapYear(short Year) {
	return ((Year % 4) == 0 && (Year % 100) != 0 || (Year % 400) == 0);
}

short NumberOfDaysInMonth(short Month, short Year) {
	if (Month < 1 || Month > 12)
		return  0;

	int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	return (Month == 2) ? (IsLeapYear(Year) ? 29 : 28) : days[Month - 1];
}

bool IsLastDayInMonth(stDate Date) {
	return (Date.Day == NumberOfDaysInMonth(Date.Month, Date.Year));
}

bool IsLastMonthInYear(short Month) {
	return (Month == 12);
}


bool IsDate1LessThanDate2(stDate Date1, stDate Date2) {
	return (Date1.Year < Date2.Year) ? true :
		(Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true :
			(Date1.Month == Date2.Month) ? (Date1.Day < Date2.Day) : false) : false;
}

void SwapDates(stDate& Date1, stDate& Date2) {

	stDate TempDate;

	TempDate.Day = Date1.Day;
	TempDate.Month = Date1.Month;
	TempDate.Year = Date1.Year;

	Date1.Day = Date2.Day;
	Date1.Month = Date2.Month;
	Date1.Year = Date2.Year;

	Date2.Day = TempDate.Day;
	Date2.Month = TempDate.Month;
	Date2.Year = TempDate.Year;
}

stDate GetSystemDate() {
	stDate Date;

	time_t t = time(0);

	tm* Now = localtime(&t);

	Date.Year = Now->tm_year + 1900;
	Date.Month = Now->tm_mon + 1;
	Date.Day = Now->tm_mday;

	return Date;
}

short ReadYear() {
	short Num;

	cout << "\nPlease Enter a Year to Check : ";
	cin >> Num;

	return Num;
}

short ReadMonth() {
	short Num;

	cout << "\nPlease Enter a Month to Check : ";
	cin >> Num;

	return Num;
}

short ReadDay() {
	short Day = 0;

	cout << "\nPlease Enter a Day : ";
	cin >> Day;

	return Day;
}

stDate ReadFullData() {
	stDate Date;

	Date.Day = ReadDay();
	Date.Month = ReadMonth();
	Date.Year = ReadYear();

	return Date;
}

int ReadDaysToAdd() {
	int AddDays = 0;

	cout << "\nPlease enter how many days do you want to add : ";
	cin >> AddDays;

	return AddDays;
}

stDate IncreaseDateByOneDay(stDate Date) {

	if (IsLastDayInMonth(Date)) {
		if (IsLastMonthInYear(Date.Month)) {
			Date.Day = 1;
			Date.Month = 1;
			Date.Year++;
		}
		else {
			Date.Day = 1;
			Date.Month++;
		}
	}
	else
	{
		Date.Day++;
	}

	return Date;
}

stDate IncreaseDateByXDays(stDate Date, short DaysCount) {

	for (short i = 1; i <= DaysCount; i++) {
		Date = IncreaseDateByOneDay(Date);
	}

	return Date;
}

stDate IncreaseDateByOneWeek(stDate Date) {

	for (short i = 1; i <= 7; i++) {
		Date = IncreaseDateByOneDay(Date);
	}

	return Date;
}

stDate IncreaseDateByXWeeks(stDate Date, short WeekCount) {

	for (short i = 1; i <= WeekCount; i++) {
		Date = IncreaseDateByOneWeek(Date);
	}

	return Date;

}

stDate IncreaseDateByOneMonth(stDate Date) {
	if (Date.Month == 12) {
		Date.Month = 1;
		Date.Year++;
	}
	else {
		Date.Month++;
	}

	return Date;
}

stDate IncreaseDateByXMonths(stDate Date, short MonthCount) {
	for (short i = 1; i <= MonthCount; i++) {
		Date = IncreaseDateByOneMonth(Date);
	}

	return Date;
}

stDate IncreaseDateByOneYear(stDate Date) {
	for (short i = 1; i <= 12; i++) {
		Date = IncreaseDateByOneMonth(Date);
	}

	return Date;
}

stDate IncreaseDateByXYears(stDate Date, short YearCount) {

	for (short i = 1; i <= YearCount; i++) {
		Date = IncreaseDateByOneYear(Date);
	}

	return Date;
}
stDate IncreaseDateByXYearsFaster(stDate Date, short YearCount) {

	for (short i = 1; i <= YearCount; i++) {
		Date.Year++;
	}

	return Date;
}


stDate IncreaseDateByOneDecade(stDate Date) {

	for (short i = 1; i <= 10; i++) {
		Date = IncreaseDateByOneYear(Date);
	}

	return Date;
}

stDate IncreaseDateByXDecades(stDate Date, short DecadeCount) {

	for (short i = 1; i <= DecadeCount; i++) {
		Date = IncreaseDateByOneDecade(Date);
	}

	return Date;
}

stDate IncreaseDateByXDecadesFaster(stDate Date, short DecadeCount) {

	for (short i = 1; i <= DecadeCount; i++) {
		Date.Year += 10;
	}

	return Date;
}

stDate IncreaseDateByOneCentury(stDate Date) {
	for (short i = 1; i <= 10; i++) {
		Date = IncreaseDateByXDecadesFaster(Date, 1);
	}

	return Date;
}

stDate IncreaseDateByOneMillennium(stDate Date) {
	for (short i = 1; i <= 10; i++) {
		Date = IncreaseDateByOneCentury(Date);
	}

	return Date;
}


int main()
{

   stDate Date = ReadFullData();

cout << "\n\nAfter Adding Dates :\n";

Date = IncreaseDateByOneDay(Date);
cout << "\n01-Adding One Day is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

short Days = 10;
Date = IncreaseDateByXDays(Date, Days);
cout << "\n02-Adding " << Days << " days is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneWeek(Date);
cout << "\n03-Adding one week is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByXWeeks(Date, Days);
cout << "\n04-Adding " << Days << " weeks is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneMonth(Date);
cout << "\n05-Adding one month is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Days = 5;
Date = IncreaseDateByXMonths(Date, Days);
cout << "\n06-Adding " << Days << " months is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneYear(Date);
cout << "\n07-Adding one year is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Days = 10;
Date = IncreaseDateByXYears(Date, Days);
cout << "\n08-Adding " << Days << " years is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByXYearsFaster(Date, Days);
cout << "\n09-Adding " << Days << " years (Faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneDecade(Date);
cout << "\n10-Adding one decade is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByXDecadesFaster(Date, Days);
cout << "\n11-Adding " << Days << " decades is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByXDecadesFaster(Date, Days);
cout << "\n11-Adding " << Days << " decades (Faster) is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneCentury(Date);
cout << "\n12-Adding one century is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;

Date = IncreaseDateByOneMillennium(Date);
cout << "\n13-Adding one millennium is : " << Date.Day << "/" << Date.Month << "/" << Date.Year;
cout << endl;



	system("pause>0");
	return 0;
}
