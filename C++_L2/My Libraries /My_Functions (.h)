#pragma once
#include <iostream>
#include<string>
using namespace std;
namespace myfunctions
{



	string ReblaceWordToAnthor(string s1, string StringtoReplace, string sReplace)
	{
		short pos = s1.find(StringtoReplace);
		while (pos != std::string::npos)
		{
			s1 = s1.replace(pos, StringtoReplace.length(), sReplace);
			pos = s1.find(StringtoReplace);
		}
		return s1;
	}


	enum enWthatoCount { Samlletters = 0, capitalletters = 1, All = 2 };
	short countlleter(string S1, enWthatoCount whatToCount = enWthatoCount::All)
	{
		if (whatToCount == enWthatoCount::All)
		{
			return S1.length();
		}
		short count = 0;
		for (short i = 0; i < S1.length(); i++)
		{

			if (whatToCount == enWthatoCount::capitalletters && isupper(S1[i]))
				count++;

			if (whatToCount == enWthatoCount::Samlletters && islower(S1[i]))
				count++;
		}
		return count;
	}
	char Readchar()
	{
		char c1;
		cout << "Please enter char \n";
		cin >> c1;
		return c1;
	}
	short CountChar(string S1, char letter,bool matchCase=true)
	{
		short count = 0;
		for (short i = 0; i < S1.length(); i++)
		{
			if (matchCase)
			{
              if (S1[i]==letter)
				count++;
			}
			else
			{
				if (toupper(S1[i] == toupper(letter)))
					count++;
			}
			  
		}
		return count;
	}
	string ReadString()
	{
		string S1;
		cout << "please Enter your string ?\n";
		getline(cin, S1);
		return S1;
	}
	string Upperallstring(string S1)
	{
		for (short i = 0; i < S1.length(); i++)
		{
			S1[i] = toupper(S1[i]);
		}
		return S1;
	}
	string Lowerallstring(string S1)
	{
		for (short i = 0; i < S1.length(); i++)
		{
				S1[i] = tolower(S1[i]);
		}
		return S1;
	}

	string ColumSperators(int Counter)
	{
		if (Counter < 10)
			return " |";
		else
			return "|";
	}
	int ReadOnlyNumber()
	{
		int Number = 0;
		cout << "Please enter a number ? " << endl;
		cin >> Number;
		 while (cin.fail())
		{
			cin.clear();
			cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
			cout << "Invalid number , Enter a valid number : " << endl;
			cin >> Number;
		}
		return Number;
	}

	enum enPrimeNotPrime { Prime = 1, NotPrime = 2 };
	enPrimeNotPrime CheckPrime(int Number)
	{
		int M = round(Number / 2);
		for (int Counter = 2; Counter <= M; Counter++)
		{
			if (Number % Counter == 0)
				return enPrimeNotPrime::NotPrime;
		}
		return enPrimeNotPrime::Prime;
	}
	bool isPerfectNumber(int Number)
	{
		int Sum = 0;
		for (int i = 1; i < Number; i++)
		{
			if (Number % i == 0)
				Sum += i;
		}
		return Number == Sum;
	}
	int SumOfDigits(int Number)
	{
		int Sum = 0, Remainder = 0;
		while (Number > 0)
		{
			Remainder = Number % 10;
			Number = Number / 10;
			Sum = Sum + Remainder;
		}
		return Sum;
	}

	int ReverseNumber(int Number)
	{
		int Remainder = 0, Number2 = 0;
		while (Number > 0)
		{
			Remainder = Number % 10;
			Number = Number / 10;
			Number2 = Number2 * 10 + Remainder;
		}
		return Number2;
	}
	int CountDigitFrequency(short DigitToCheck, int Number)
	{
		int FreqCount = 0, Remainder = 0;
		while (Number > 0)
		{
			Remainder = Number % 10;
			Number = Number / 10;
			if (DigitToCheck == Remainder)
			{
				FreqCount++;
			}
		}
		return FreqCount;
	}
	bool IsPalindromeNumber(int Number)
	{
		return Number == ReverseNumber(Number);
	}
	string ReadPassword()
	{
		string Password;
		cout << "Please enter a 3-Letter Password (all capital)?\n";
		cin >> Password;
		return Password;
	}
	bool GuessPassword(string OriginalPassword)
	{
		string word = "";
		int Counter = 0;
		cout << "\n";
		for (int i = 65; i <= 90; i++)
		{
			for (int j = 65; j <= 90; j++)
			{
				for (int k = 65; k <= 90; k++)
				{
					Counter++;
					word = word + char(i);
					word = word + char(j);
					word = word + char(k);
					cout << "Trial [" << Counter << "] : " << word
						<< endl;
					if (word == OriginalPassword)
					{
						cout << "\nPassword is " << word << "\n";
						cout << "Found after " << Counter << " Trial(s)\n";
							return true;
					}
					word = "";
				}
			}
		}
		return false;
	}
	int SumtheMatrix(int matrix[4][4], short Rows, short colm)
	{
		int Sum = 0;
		for (short i = 0; i < Rows; i++)
		{
			for (short j = 0; j < colm; j++)
			{

				Sum += matrix[i][j];

			}

		}
		return Sum;
	}
	string ReadText()
	{
		string Text;
		cout << "Please enter Text?\n";
		getline(cin, Text);
		return Text;
	}
	string EncryptText(string Text, short EncryptionKey)
	{
		for (int i = 0; i <= Text.length(); i++)
		{
			Text[i] = char((int)Text[i] + EncryptionKey);
		}
		return Text;
	}
	string DecryptText(string Text, short EncryptionKey)
	{
		for (int i = 0; i <= Text.length(); i++)
		{
			Text[i] = char((int)Text[i] - EncryptionKey);
		}
		return Text;
	}
	int RandomNumbers(int From, int To)
	{
		//Function to generate a random number
		int randNum = rand() % (To - From + 1) + From;
		return randNum;
	}
	enum enCharType {
		SamallLetter = 1, CapitalLetter = 2,
		SpecialCharacter = 3, Digit = 4
	};
	char GetRandomCharacter(enCharType CharType)
	{
		switch (CharType)
		{
		case enCharType::SamallLetter:
		{
			return char(RandomNumbers(97, 122));
			break;
		}
		case enCharType::CapitalLetter:
		{
			return char(RandomNumbers(65, 90));
			break;
		}
		case enCharType::SpecialCharacter:
		{
			return char(RandomNumbers(33, 47));
			break;
		}
		case enCharType::Digit:
		{
			return char(RandomNumbers(48, 57));
			break;
		}
		}
	}
	string GenerateWord(enCharType CharType, short Length)
	{
		string Word;
		for (int i = 1; i <= Length; i++)
		{
			Word = Word + GetRandomCharacter(CharType);
		}
		return Word;
	}
	// Output: TQST-MAKQ-ZJSD-QSKW
	string GenerateKey()
	{
		string Key = "";
		Key = GenerateWord(enCharType::CapitalLetter, 4) + "-";
		Key = Key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
		Key = Key + GenerateWord(enCharType::CapitalLetter, 4) + "-";
		Key = Key + GenerateWord(enCharType::CapitalLetter, 4);
		return Key;
	}
	int TimesRepeated(int Number, int arr[100], int arrLength)
	{
		int count = 0;
		for (int i = 0; i <= arrLength - 1; i++)
		{
			if (Number == arr[i])
			{
				count++;
			}
		}
		return count;
	}
	int MaxNumberInArray(int arr[100], int arrLength)
	{
		int Max = 0;
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] > Max)
			{
				Max = arr[i];
			}
		}
		return Max;
	}
	int MinNumberInArray(int arr[100], int arrLength)
	{
		int Min = 0;
		Min = arr[0];
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] < Min)
			{
				Min = arr[i];
			}
		}
		return Min;
	}
	int SumArray(int arr[100], int arrLength)
	{
		int Sum = 0;
		for (int i = 0; i < arrLength; i++)
		{
			Sum += arr[i];
		}
		return Sum;
	}
	float ArrayAverage(int arr[100], int arrLength)
	{
		return (float)SumArray(arr, arrLength) / arrLength;
	}
	short FindNumberPositionInArray(int Number, int arr[100], int arrLength)
	{
		/*This function will search for a number in array and return its
		index,
		or return -1 if it does not exists*/
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] == Number)
				return i;// and return the index
		}
		//if you reached here, this means the number is not found
		return -1;
	}
	bool IsNumberInArray(int Number, int arr[100], int arrLength)
	{
		return FindNumberPositionInArray(Number, arr, arrLength) != -1;
	}
	bool IsPalindromeArray(int arr[100], int Length)
	{
		for (int i = 0; i < Length; i++)
		{
			if (arr[i] != arr[Length - i - 1])
			{
				return false;
			}
		};
		return true;
	}

	int OddCount(int arr[100], int arrLength)
	{
		int Counter = 0;
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] % 2 != 0)
			{
				Counter++;
			}
		}
		return Counter;
	}
	int EvenCount(int arr[100], int arrLength)
	{
		int Counter = 0;
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] % 2 == 0)
			{
				Counter++;
			}
		}
		return Counter;
	}
	int PositiveCount(int arr[100], int arrLength)
	{
		int Counter = 0;
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] >= 0)
			{
				Counter++;
			}
		}
		return Counter;
	}
	int NegativeCount(int arr[100], int arrLength)
	{
		int Counter = 0;
		for (int i = 0; i < arrLength; i++)
		{
			if (arr[i] < 0)
			{
				Counter++;
			}
		}
		return Counter;
	}
	float MyABS(float Number)
	{
		if (Number > 0)
			return Number;
		else
			return Number * -1;
	}
	float GetFractionPart(float Number)
	{
		return Number - int(Number);
	}
	int MyRound(float Number)
	{
		int IntPart;
		IntPart = int(Number);
		float FractionsPart = GetFractionPart(Number);
		if (FractionsPart >= .5)
		{
			if (Number > 0)
			{
				return ++IntPart;
			}
			else
			{
				return --IntPart;
			}
		}
		else
		{
			return IntPart;
		}
	}

	int MyFloor(float Number)
	{
		if (Number > 0)
			return int(Number);
		else
			return int(Number) - 1;
	}
	int MyCeil(float Number)
	{
		if (abs(GetFractionPart(Number)) > 0)
		{
			if (Number > 0)
				return int(Number) + 1;
			else
				return int(Number);
		}
		else
		{
			return int(Number);
		}
	}
	int MySqrt(float Number)
	{
		return pow(Number, 0.5);
	}




}
